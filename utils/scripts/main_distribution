#!/bin/bash

  #---------------------------------------------------------------------------------------------------------------------
  # FIRST LEVEL FUNCTIONS
  #---------------------------------------------------------------------------------------------------------------------
  usage() {
    echo "***********************************************************"
    echo "  Usage: main_distribution <distribution>"
    echo "    - distribution : ubuntu | suse | debian | centos | sc"
    echo "***********************************************************"
  }

  display_error() {
    local errMsg=$1
    echo " "
    echo "ERROR: $errMsg"
    echo " "
  }

  display_error_and_exit() {
    local errMsg=$1
    display_error "$errMsg"
    exit 1
  }

  set_env() {
    # Define jenkins job and path
    if [ "${distr}" == "ubuntu" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}Ubuntu.16-docker"
    elif [ "${distr}" == "debian" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}Debian.9-docker"
    elif [ "${distr}" == "suse" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}Suse.42-docker"
    elif [ "${distr}" == "centos" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}CentOS.7-docker"
    elif [ "${distr}" == "sc" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}SC-docker/"
    else 
      display_error "Unknown distribution"
      exit 1
    fi
    JENKINS_PACKAGES_PATH="/home/jenkins/jobs/${JENKINS_JOB}/workspace/builders/packages/"

    # Define user variables
    trunk_base="${script_dir}/../../"				   # Base trunk folder
    log_base_folder="${trunk_base}/logs/"                            # Folder to store logs

    log_folder="${log_base_folder}/${distr}"
    specs_base_folder="${trunk_base}/builders/specs/"		   # Folder to run package building scripts
    package_base_folder="${trunk_base}/builders/packages/"           # Folder to store packages and upload them to repository

    # Create package base folder if needed
    mkdir -p "${package_base_folder}"

    # Wipe and create log folder
    rm -rf "${log_folder}"
    mkdir -p "${log_folder}"

    # Set full log output file
    full_log="${log_folder}/full_exec.log"
  }

  exec_distribution() {
    # Setup Container
    setup_container

    # Compile COMPSs
    compile

    # Create packages
    create_packages 

    # Update to unstable repo
    update_repo "unstable"

    # Install
    install 

    # Run tests
    run_tests

    # Update to testing repo
    update_repo "testing"

    # END
    echo " "
    echo " CONGRATULATIONS! The ${distr} process succeeded"
    echo " "
  }

  exec_sc() {
    # Create packages
    create_packages_sc

    # Update to unstable repo
    update_repo_from_master "unstable"

    # Update to testing repo
    update_repo_from_master "testing"

    # END
    echo " "
    echo " CONGRATULATIONS! The ${distr} process succeeded"
    echo " "
  }


  #---------------------------------------------------------------------------------------------------------------------
  # SECOND LEVEL FUNCTIONS FOR GENERIC DISTRIBUTION
  #---------------------------------------------------------------------------------------------------------------------
  setup_container() {
    echo -e "\e[0m"
    echo "**************************"
    echo "***   Setup Container  ***"
    echo "**************************"
    echo -e "\e[0m"

    echo "-- Setting up Container hosts..."
    sudo "${trunk_base}/tests/scripts/configure_hosts_insert" || display_error_and_exit "Cannot configure hosts before tests"
  }

  compile() {
    echo -e "\e[0m"
    echo "**************************"
    echo "*** Compile COMPSs GIT ***"
    echo "**************************"
    echo -e "\e[0m"

    cd "${trunk_base}" || exit 1
    mvn -U clean install || display_error_and_exit "Cannot compile COMPSs GIT Revision"
    cd "${script_dir}" || exit 1
  }

  create_packages() {
    echo -e "\e[0m"
    echo "**************************"
    echo "*** Generate Packages  ***"
    echo "**************************"
    echo -e "\e[0m"

    if [[ ${DEBIAN_DISTRS} == *"${distr}"* ]]; then
      cd "${specs_base_folder}/deb/" || exit 1
      ./builddeb "${distr}" "${COMPSs_version}" || display_error_and_exit "Building DEB script failed"
      cd "${script_dir}" || exit 1
    elif [[ ${RPM_DISTRS} == *"${distr}"* ]]; then
      cd "${specs_base_folder}/rpm/" || exit 1
      ./buildrpm "${distr}" "${COMPSs_version}" || display_error_and_exit "Building RPM script failed"
      cd "${script_dir}" || exit 1
    else
      # Other (should never reach this point)
      display_error "OTHER PACKAGES NOT SUPPORTED IN THIS SCRIPT"
      exit 1
    fi
  }

  update_repo() {
    echo -e "\e[0m"
    echo "**************************"
    echo "***   Export Packages  ***"
    echo "**************************"
    echo -e "\e[0m"

    local release_type=$1

    # Move built packages to master
    ssh -t -t -o StrictHostKeyChecking=no -o BatchMode=yes -o ChallengeResponseAuthentication=no "${JENKINS_USER}"@"${MASTER_VM}" rm -rf "${JENKINS_PACKAGES_PATH}"
    ssh -t -t -o StrictHostKeyChecking=no -o BatchMode=yes -o ChallengeResponseAuthentication=no "${JENKINS_USER}"@"${MASTER_VM}" mkdir -p "${JENKINS_PACKAGES_PATH}"
    scp -r -o StrictHostKeyChecking=no "${package_base_folder}/${distr}" "${JENKINS_USER}"@"${MASTER_VM}":"${JENKINS_PACKAGES_PATH}"
    local ev=$?
    if [ $ev -ne 0 ]; then
      display_error "Cannot move packages to master node"
      exit 1
    fi

    # Ask the repo manager to upload them
    update_repo_from_master "${release_type}"
  }

  install() {
    echo -e "\e[0m"
    echo "**************************"
    echo "***  Installing COMPSs ***"
    echo "**************************"
    echo -e "\e[0m"

    local installer_script="${script_dir}/installation/install_compss_${distr}"
   
    sudo "${installer_script}" || display_error_and_exit "Cannot install unstable COMPSs version"
  }

  run_tests() {
    echo -e "\e[0m"
    echo "***************************"
    echo "*** Running local TESTS ***"
    echo "***************************"
    echo -e "\e[0m"

    echo "-- Running NIO tests..."
    source /etc/profile.d/compss.sh
    cfgFile=$(mktemp -p "${log_folder}")
    cat > "$cfgFile" << EOT
user=$(whoami)
target_base_dir=${log_folder}/tests/
comm=es.bsc.compss.nio.master.NIOAdaptor
JAVA_HOME=${JAVA_HOME}
EOT
    cd "${trunk_base}/tests/scripts/" || exit 1
    ./main --retry=5 local "$cfgFile"
    if [ $? -ne 0 ]; then
      display_error "Tests failed. Check errors above"
      exit 1
    fi
    cd "${script_dir}" || exit 1
  }


  #---------------------------------------------------------------------------------------------------------------------
  # SECOND LEVEL FUNCTIONS FOR SC DISTRIBUTION
  #---------------------------------------------------------------------------------------------------------------------
  create_packages_sc() {
    echo -e "\e[0m"
    echo "**************************"
    echo "*** Generate Packages  ***"
    echo "**************************"
    echo -e "\e[0m"

    cd "${specs_base_folder}/sc" || exit 1
    ./buildsc "${COMPSs_version}" || display_error_and_exit "Building SC script failed"
    cd "${script_dir}" || exit 1
  }

  update_repo_from_master() {
    echo -e "\e[0m"
    echo "**************************************"
    echo "***   Export Packages from master  ***"
    echo "**************************************"
    echo -e "\e[0m"

    local release_type=$1

    # Ask the repo manager to upload them
    local MAX_RETRIES=3
    local SLEEP_BETWEEN_RETRIES=60s
    local retries=0
    local result="FAIL"
    while [ "${result}" != "DONE" ] && [ ${retries} -lt ${MAX_RETRIES} ]; do
      result=$(curl -X POST "http://compss.bsc.es/COMPSsRepositoryService/COMPSsRepo/update?job=${JENKINS_JOB}&distribution=${distr}&type=${release_type}")
      retries=$((retries + 1))
    
      if [ "${result}" != "DONE" ]; then
        sleep ${SLEEP_BETWEEN_RETRIES}
      fi
    done
   
    # Check final exit status
    if [ "${result}" != "DONE" ]; then
      display_error "Cannot export packages"
      exit 1
    fi
  }

  #---------------------------------------------------------------------------------------------------------------------
  # MAIN PROGRAM
  #---------------------------------------------------------------------------------------------------------------------

  #---------------------------------------------------------------------------------------------------------------------
  # WARNING: DO NOT MODIFY ANYTHING BELOW THIS MESSAGE UNLESS YOU KNOW WHAT YOU ARE DOING
  #---------------------------------------------------------------------------------------------------------------------

  # Define script variables
  script_dir=$(pwd)/$(dirname "$0")

  COMPSs_version=mf2c-it1

  JENKINS_JOB_BASENAME="COMPSs_Framework_Trunk_Build_"
  JENKINS_USER="jenkins"
  MASTER_VM="bscgrid05.bsc.es"

  DEBIAN_DISTRS="ubuntu debian"
  RPM_DISTRS="suse centos"
  OTHER_DISTRS="sc"

  # Check parameters
  if [ $# -ne 1 ]; then
     display_error "Incorrect number of parameters"
     usage
     exit 1
  fi

  distr=$1
  if [[ ${DEBIAN_DISTRS} != *"${distr}"* ]] && [[ ${RPM_DISTRS} != *"${distr}"* ]] && [[ ${OTHER_DISTRS} != *"${distr}"* ]]; then
     display_error "Unknown distribution parameter"
     usage
     exit 1
  fi
 
  # Log start of execution
  echo -e "\e[0m"
  echo "********************************"
  echo "*** Start process on ${distr}  ***"
  echo "********************************"
  echo -e "\e[0m"
 
  # Set environment
  set_env || display_error_and_exit "Cannot set script envrionment"

  # Execute distribution
  if [[ ${OTHER_DISTRS} == *"${distr}"* ]]; then
    # Execute SC
    exec_sc > >(tee "${full_log}") 2> >(tee "${full_log}" >&2)
  else
    exec_distribution > >(tee "${full_log}") 2> >(tee "${full_log}" >&2)
    exitValue=$?
  fi
  exitValue=$?

  # End value
  if [ $exitValue -ne 0 ]; then
    display_error "Build on distribution failed. Please check errors above"
  else
    echo " "
    echo " SUCCESS!"
    echo " "
  fi

  exit $exitValue

