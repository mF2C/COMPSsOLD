#!/bin/bash

usage() {
  local exitValue=$1

  echo " "
  echo "Usage ./update_documentation <version>"
  echo " "

  exit "$exitValue"
}
 
  #=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  #=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  # Check parameters
  if [ $# -ne 1 ]; then
    echo "ERROR: Incorrect number of parameters"
    usage 1
  fi

  # Get version parameters
  version=$1
  echo "Creating COMPSs ${version} documentation..."

  # Define script variables
  SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  trunk_dir=${SCRIPT_DIR}/../../../
  documentation_dir=${trunk_dir}/../documentation/COMPSs_Manuals/

  # Clone documentation repo
  cd ${trunk_dir}/..
  git clone http://${GIT_USER}:${GIT_PASSWORD}@compss.bsc.es/gitlab/documents/documentation.git



  #---------------------------------------------------------------------
  # Update internal files version on new tag
  echo "- Update files version"
  sed -i '/Version: /cVersion: '"${version}"'' "${documentation_dir}/${version}/README"

  for doc in ${documentation_dir}/*; do
    cd "${doc}" || exit 1
    latexFile=$(ls *.tex | grep -v configuration.tex)
    echo "$latexFile"
    sed -i '/Version: /cVersion: '"${version}"'' README
    sed -i '/\\def \\compssversion/c\\\def \\compssversion \{'"${version}"'\}' "$latexFile"
    sed -i 's/<\<version\>>/'"${version}"'/g' "$latexFile"
    cd "${SCRIPT_DIR}" || exit 1
  done

  #---------------------------------------------------------------------
  # Update internal files version on latest
  echo "- Update files version"
  sed -i '/Version: /cVersion: '"${version}"'' "${documentation_dir}/README"

  for doc in ${documentation_dir}/*; do
    cd "${doc}" || exit 1
    latexFile=$(ls *.tex | grep -v configuration.tex)
    echo "$latexFile"
    sed -i '/Version: /cVersion: '"${version}"'' README
    sed -i '/\\def \\compssversion/c\\\def \\compssversion \{'"${version}"'\}' "$latexFile"
    sed -i 's/<\<version\>>/'"${version}"'/g' "$latexFile"
    cd "${SCRIPT_DIR}" || exit 1
  done

  #---------------------------------------------------------------------
  # Generate PDF files
  echo "- Generate PDF files"

  for doc in ${documentation_dir}/*; do
    cd "${doc}" || exit 1
    latexFile=$(ls *.tex | grep -v configuration.tex) 
    pdflatex -interaction=nonstopmode "${latexFile}"
    pdflatex -interaction=nonstopmode "${latexFile}"
    pdflatex -interaction=nonstopmode "${latexFile}"
    cd "${SCRIPT_DIR}" || exit 1
  done

  #---------------------------------------------------------------------
  # Commit modifications
  echo "- Commit modifications"
  cd "${documentation_dir}" || exit 1
  git commit -am "Adding documentation new tag ${version}"
  git tag COMPSs_Manuals_${version}
  git push http://${GIT_USER}:${GIT_PASSWORD}@compss.bsc.es/gitlab/documents/documentation.git master
  git push http://${GIT_USER}:${GIT_PASSWORD}@compss.bsc.es/gitlab/documents/documentation.git --tags
  cd "${SCRIPT_DIR}" || exit 1

  #---------------------------------------------------------------------
  # Copy documentation
  echo "- Copy documentation to trunk"
  allowed_pdfs="COMPSs_Installation_Manual.pdf COMPSs_Supercomputers_Manual.pdf COMPSs_User_Manual_App_Development.pdf COMPSs_User_Manual_App_Exec.pdf COMPSs_Tracing_Manual.pdf"
  pdfs=$(find "${documentation_dir}" -name *.pdf)
  for doc in ${pdfs}; do
    docname=$(basename "$doc")
    if [[ *$docname* == "${allowed_pdfs}" ]]; then
      echo "*** Synchronizing $doc to trunk"
      cp "$doc" "${trunk_dir}/doc/"
    fi
  done

  #---------------------------------------------------------------------
  # Commit modifications
  echo "- Commit trunk modifications"
  cd "${trunk_dir}/doc/" || exit 1
  git commit -am "Adding documentation synchronized for new tag ${version}"
  git push http://${GIT_USER}:${GIT_PASSWORD}@compss.bsc.es/gitlab/compss/framework.git trunk
  cd "${SCRIPT_DIR}" || exit 1

  #---------------------------------------------------------------------
  # NOTIFY SUCCESS
  echo " "
  echo "FINISHED! COMPSs Tag ${version} Documnetation updated"
  echo " "

  # END
  exit 0
