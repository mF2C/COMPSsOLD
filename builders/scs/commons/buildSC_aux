#!/bin/bash

  #############################################################
  # Name: buildSC_aux
  # Description: SCRIPT FOR LOCAL COMPSs BUILD in SuperComputers
  # Parameters: <targetDir>           Base Target Installation folder
  #             <modules>             Modules needed to perform installation
  #             <py2_module>          Modules needed to perform python2 binding installation
  #             <py3_modules>         Modules needed to perform python3 binding installation
  #             <additionalExports>   Additional exports to perform installation
  #		          <queues_cfg>	        CFG to set as default
  #             <extrae_with_openmpi> Extrae with openmpi enabled
  #             <openmpi_version>     OpenMPI module version
  #             <extrae_with_impi>    Extrae with impi enabled
  #             <impÃ¬_version>        IMPI module version
  #
  # ATTENTION: DO NOT EXECUTE THIS FILE. IT IS AUTOMATICALLY
  #            EXECUTED FROM buildSC script
  #############################################################

  usage() {
    echo "Incorrect number of parameters"
    echo " Usage: buildSC_aux <FullTargetPath> <modules> <py2_modules> <py3_modules> <additionalExports> <queues_cfg> <extrae_with_openmpi> <openmpi_version> <extrae_with_impi> <impi_version>"
    echo " "
    exit 1
  }

  ####################
  # MAIN
  ####################
  # Get parameters
  if [ $# -ne 10 ]; then
    usage
  fi

  # SET SCRIPT VARIABLES
  targetDir=$1
  modules=$2
  py2_modules=$3
  py3_modules=$4
  additionalExports=$5
  queues_cfg=$6
  extrae_with_openmpi=$7
  openmpi_version=$8
  extrae_with_impi=$9
  impi_version=${10}

  scriptDir=$(dirname $0)
  tmpDir=${scriptDir}/tmp

  echo "- SC script Dir = ${scriptDir}"
  echo "- SC tmp Dir    = ${tmpDir}"
  echo "- SC target Dir = ${targetDir}"

  # Load needed modules on MN
  echo "- Load modules on SC account"
  module purge
  module load ${modules}
  if [ $? -ne 0 ]; then
    echo "ERROR: Cannot load required modules"
    exit 1
  fi

  # Save original path to remove libxml imports that crashes python binding in mt installation
  originalPath=$PATH

  # Load additional exports
  ${additionalExports}

  # CREATE TARGET FOLDER
  echo "- Create target folder"
  rm -rf ${targetDir}
  mkdir -p ${targetDir}
  mkdir -p ${targetDir}/Doc
  mkdir -p ${targetDir}/Dependencies
  mkdir -p ${targetDir}/Dependencies/extrae
  mkdir -p ${targetDir}/Runtime
  mkdir -p ${targetDir}/Runtime/configuration
  mkdir -p ${targetDir}/Runtime/scripts
  mkdir -p ${targetDir}/Runtime/adaptors
  mkdir -p ${targetDir}/Runtime/connectors
  mkdir -p ${targetDir}/Runtime/cloud-conn
  mkdir -p ${targetDir}/Runtime/scheduler
  mkdir -p ${targetDir}/Tools
  mkdir -p ${targetDir}/Tools/monitor
  mkdir -p ${targetDir}/Bindings
  mkdir -p ${targetDir}/Bindings/bindings-common

  # RUNTIME DEPLOYMENT
  echo "- Copy Runtime deployment files"

  #Doc
  echo "--- Copy docs"
  find ${tmpDir}/doc/ -name *.html | xargs rm -rf
  cp -r ${tmpDir}/doc/* ${targetDir}/Doc
  cp ${tmpDir}/changelog ${targetDir}
  cp ${tmpDir}/LICENSE ${targetDir}
  cp ${tmpDir}/NOTICE ${targetDir}
  cp ${tmpDir}/README.md ${targetDir}
  cp ${tmpDir}/RELEASE_NOTES ${targetDir}

  #Dependencies
  echo "--- Copy dependencies"
  cp -r ${tmpDir}/dependencies/JAVA_GAT ${targetDir}/Dependencies/
  cp -r ${tmpDir}/files/paraver ${targetDir}/Dependencies/
  cd ${tmpDir}/dependencies/extrae

  echo "---- Install extrae ----"
  # Sequential installation
  ./install ${targetDir}/Dependencies/extrae false
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to install extrae sequential dependency"
    exit 1
  fi

  # OpenMPI
  if [ "${extrae_with_openmpi}" == "true" ]; then
    module load openmpi${openmpi_version}
    ./install ${targetDir}/Dependencies/extrae-openmpi true
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to install extrae openmpi dependency"
      exit 1
    fi
    module unload openmpi
  fi

  # IMPI
  if [ "${extrae_with_impi}" == "true" ]; then
    module load intel
    module load impi${impi_version}
    ./install ${targetDir}/Dependencies/extrae-impi true
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to install extrae impi dependency"
      exit 1
    fi
    module unload impi
  fi
  cd ${scriptDir}

  # Restore original path
  export PATH=${originalPath}

  # Config
  echo "--- Copy configuration"
  find ${tmpDir}/compss/runtime/config -name src | xargs rm -rf
  find ${tmpDir}/compss/runtime/config -name target | xargs rm -rf
  find ${tmpDir}/compss/runtime/config -name pom.xml | xargs rm -rf
  cp -r ${tmpDir}/compss/runtime/config/* ${targetDir}/Runtime/configuration/
  sed -i -e 's#/opt/COMPSs/#'${targetDir}'#g'  ${targetDir}/Runtime/configuration/xml/projects/default_project.xml

  # Scripts
  echo "--- Copy scripts"
  cp -r ${tmpDir}/compss/runtime/scripts/* ${targetDir}/Runtime/scripts/
  cp ${targetDir}/Runtime/scripts/queues/cfgs/${queues_cfg} ${targetDir}/Runtime/scripts/queues/cfgs/default.cfg

  # Adaptors
  echo "--- Copy adaptors"
  find ${tmpDir}/compss/runtime/adaptors -name pom.xml | xargs rm -rf
  rm -r ${tmpDir}/compss/runtime/adaptors/commons
  path_source=${tmpDir}/compss/runtime/adaptors
  path_target=${targetDir}/Runtime/adaptors
  adaptors=$(ls ${path_source})
  for adaptor in $adaptors; do
    mkdir ${path_target}/$adaptor
    mkdir ${path_target}/$adaptor/master
    cp ${path_source}/$adaptor/master/*.jar ${path_target}/$adaptor/master
    if [ -f ${path_source}/$adaptor/master/properties ]; then
      cp ${path_source}/$adaptor/master/properties ${path_target}/$adaptor/master
    fi
    if [ -d "${path_source}/$adaptor/worker/" ]; then
      mkdir ${path_target}/$adaptor/worker
      cp ${path_source}/$adaptor/worker/*.jar ${path_target}/$adaptor/worker
    fi
    if [ -f ${path_source}/$adaptor/worker/properties ]; then
      cp ${path_source}/$adaptor/worker/properties ${path_target}/$adaptor/worker
    fi
    if [ -d "${path_source}/$adaptor/scripts/" ]; then
      mkdir -p ${targetDir}/Runtime/scripts/system/adaptors/$adaptor/
      cp -r ${path_source}/$adaptor/scripts/* ${targetDir}/Runtime/scripts/system/adaptors/$adaptor/
    fi
  done

  # Schedulers
  echo "--- Copy schedulers"
  rm -r ${tmpDir}/compss/runtime/scheduler/commons
  schedulers=$(find ${tmpDir}/compss/runtime/scheduler/ -name "*.jar")
  for scheduler in $schedulers; do
    cp $scheduler ${targetDir}/Runtime/scheduler/
  done

  #Connectors
  echo "--- Copy Runtime Connectors"
  connectors=$(find ${tmpDir}/compss/runtime/resources/ -name "*.jar" | grep -v "cloud-conn")
  for conn in $connectors; do
    cp $conn ${targetDir}/Runtime/connectors/
  done
  echo "--- Copy CONN Connectors"
  connectors=$(find ${tmpDir}/compss/runtime/resources/ -name "*.jar" | grep "cloud-conn")
  for conn in $connectors; do
    cp $conn ${targetDir}/Runtime/cloud-conn/
  done

  # Engine
  echo "--- Copy engine"
  cp ${tmpDir}/compss/runtime/compss-engine.jar ${targetDir}/Runtime/

  # TOOLS DEPLOYMENT
  echo "- Deploying COMPSs Tools"
  cd ${tmpDir}
  tar xzf apache-tomcat.tar.gz
  cd ${scriptDir}
  mv ${tmpDir}/apache-tomcat-* ${targetDir}/Tools/monitor/apache-tomcat/
  rm -rf ${targetDir}/Tools/monitor/apache-tomcat/webapps/*
  rm -f ${targetDir}/Tools/monitor/apache-tomcat/conf/server.xml
  cp -r ${tmpDir}/compss/tools/monitor/target/*.war ${targetDir}/Tools/monitor/apache-tomcat/webapps/
  cp ${tmpDir}/compss/tools/monitor/target/classes/compss-monitor.conf ${targetDir}/Tools/monitor/apache-tomcat/conf/
  cp ${tmpDir}/compss/tools/monitor/target/classes/server.xml ${targetDir}/Tools/monitor/apache-tomcat/conf/
  cp ${tmpDir}/compss/tools/monitor/target/classes/*log4j* ${targetDir}/Tools/monitor/

  # BINDINGS DEPLOYMENT
  echo "- Deploying bindings-common files"
  cd ${tmpDir}/compss/programming_model/bindings/bindings-common
  ./install_common ${targetDir}/Bindings/bindings-common
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to install bindings-common"
    exit 1
  fi
  echo "- Deploying c-binding files"
  cd ${tmpDir}/compss/programming_model/bindings/c
  ./install ${targetDir}/Bindings/c true
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to install C-binding"
    exit 1
  fi
  mkdir -p ${targetDir}/Runtime/scripts/system/c/
  cp ${targetDir}/Bindings/c/bin/* ${targetDir}/Runtime/scripts/system/c
  cp ./compss_build_app ${targetDir}/Runtime/scripts/user/
  echo "- Deploying python-binding files"
  cd ${tmpDir}/compss/programming_model/bindings/python
  if [ -n "$py2_modules" ]; then
    echo "    - For python 2"
    if [ "$py2_modules" != "ignore" ]; then
      module load ${py2_modules}
    fi
    ./install ${targetDir}/Bindings/python false false python2
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to install Python-binding for Python 2"
      exit 1
    fi
    if [ "$py2_modules" != "ignore" ]; then
      module unload ${py2_modules}
    fi
  fi
  if [ -n "$py3_modules" ]; then
    echo "    - For python 3"
    if [ "$py3_modules" != "ignore" ]; then
      module load ${py3_modules}
    fi
    # If installed, unify installations (second boolean to true)
    ./install ${targetDir}/Bindings/python false true python3
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to install Python-binding for Python 3"
      exit 1
    fi
  fi
  cd ${scriptDir}

  # ADD RUNCOMPSS TO PROFILE
  mkdir -p ${targetDir}/etc/profile.d/
  echo " - Adding runcompss to profile..."
  echo "export PATH=\$PATH:${targetDir}/Runtime/scripts/user" > ${targetDir}/etc/profile.d/compss.sh
  echo " - Runcompss added to user profile"
  echo " "
  echo " - Adding compss-engine.jar to profile..."
  echo "export CLASSPATH=\$CLASSPATH:${targetDir}/Runtime/compss-engine.jar" >> ${targetDir}/etc/profile.d/compss.sh
  echo " - compss-engine.jar added to user profile"
  echo " "
  echo " - Adding c-binaries to profile..."
  echo "export PATH=\$PATH:${targetDir}/Bindings/c/bin" >> ${targetDir}/etc/profile.d/compss.sh
  echo " - c-binaries added to user profile"
  echo " "
  # echo " - Adding PyCOMPSs to user profile..."
  # echo "export PYTHONPATH=\$PYTHONPATH:${targetDir}/Bindings/python/" >> ${targetDir}/etc/profile.d/compss.sh
  # echo " - PyCOMPSs added to user profile"
  # echo " "

  # ADD MONITOR SCRIPT TO ETC
  echo "- Add monitor script to init.d"
  mkdir -p ${targetDir}/etc/init.d/
  cp ${tmpDir}/compss/tools/monitor/scripts/compss-monitor ${targetDir}/etc/init.d/
  chmod 755 ${targetDir}/etc/init.d/compss-monitor

  # ERASE TMP FILES
  echo "- Erase tmp files"
  rm -rf ${tmpDir}

  # SET TARGETDIR PERMISSIONS
  echo "- Set COMPSs permissions"
  chmod -R 775 ${targetDir}
  chmod -R 777 ${targetDir}/Runtime/configuration/

  # END
  exit 0
