#!/bin/bash -e

#####################################################################
# Name:         buildlocal
# Description:  Script for COMPSs local build
# Parameters:
#		[--monitor]     Enable Monitor installation
#		[--no-monitor]  Disable Monitor installation
#		[--bingings]    Enable bindings installation
#		[--no-bindings] Disable bindings installation
#		[--tracing]     Enable tracing system installation
#		[--no-tracing]  Disable tracing system installation
#		targetDir	COMPSs installation directory
######################################################################


#---------------------------------------------------
# SCRIPT CONSTANTS DECLARATION
#---------------------------------------------------
DEFAULT_MONITOR=true
DEFAULT_BINDINGS=true
DEFAULT_TRACING=true
DEFAULT_USER=false
DEFAULT_TARGET_DIR=/opt/COMPSs
DEFAULT_MVN_TESTS=""
MVN_SKIP_TESTS_OPT="-Dmaven.test.skip=true"

INCORRECT_PARAMETER="Error: No such parameter"
NO_MONITOR="Warning: No monitor specified. Loading default value"
NO_BINDINGS="Warning: No bindings specified. Loading default value"
NO_TRACING="Warning: No tracing specified. Loading default value"
NO_TARGET_DIR="Warning: No install directory specified. Loading default location"


#---------------------------------------------------
# SET SCRIPT VARIABLES
#---------------------------------------------------
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SOURCES_DIR=${SCRIPT_DIR}/..
TMP_DIR=${SCRIPT_DIR}/tmp


#---------------------------------------------------
# FUNCTIONS DECLARATION
#---------------------------------------------------
show_opts() {
  cat <<EOT
* Options:
    --help, -h          Print this help message

    --opts              Show available options

    --version, -v       Print COMPSs version

    --monitor		Enable Monitor installation
    --no-monitor 	Disable Monitor installation
			Default: ${DEFAULT_MONITOR}

    --bindings		Enable bindings installation
    --no-bindings       Disable bindings installation
			Default: ${DEFAULT_BINDINGS}

    --tracing           Enable tracing system installation
    --no-tracing        Disable tracing system installation
			Default: ${DEFAULT_TRACING}

    --nothing		Disable all previous options
			Default: unused

    --user-exec=<str>   Enables a specific user execution for maven compilation
                        When used the maven install is not cleaned.
			Default: ${DEFAULT_USER}

    --skip-tests        Disables MVN unit tests
                        Default: ${DEFAULT_MVN_TESTS}

* Parameters:
    targetDir		COMPSs installation directory
			Default: ${DEFAULT_TARGET_DIR}

EOT
}

usage() {
  exitValue=$1

  cat <<EOT
Usage: $0 [options] targetDir
EOT
  show_opts
  exit "$exitValue"
}

show_version() {
  echo "COMPSs version 2.2.rc1803"
  echo " "
}

# Displays arguments warnings
display_warning() {
  local warn_msg=$1
  echo "$warn_msg"
}

# Displays parsing arguments errors
display_error() {
  local error_msg=$1
  echo "$error_msg"

  echo " "
  usage 1
}


get_args() {
  #Parse COMPSs Options
  while getopts hv-: flag; do
    # Treat the argument
    case "$flag" in
      h)
	# Display help
	usage 0
	;;
      v)
        # Display version
        show_version
        exit
        ;;
      -)
	# Check more complex arguments
	case "$OPTARG" in
	  help)
	    # Display help
	    usage 0
	    ;;
          version)
            # Show version
            show_version
            exit 0
            ;;
          opts)
            # Display help
            show_opts
            exit 0
            ;;
	  monitor)
	    # Custom monitor value
	    monitor=true
	    ;;
          no-monitor)
            # Custom monitor value
            monitor=false
            ;;
          bindings)
            # Custom bindings value
            bindings=true
            ;;
          no-bindings)
            # Custom bindings value
            bindings=false
            ;;
          tracing)
            # Custom tracing value
            tracing=true
            ;;
          no-tracing)
            # Custom tracing value
            tracing=false
            ;;
          nothing)
            # Disables all flags
            tracing=false
            monitor=false
            bindings=false
            ;;
          user-exec=*)
            # Enables specific user mvn execution
            user_exec=${OPTARG//user-exec=/}
            ;;
          skip-tests)
            # Disable mvn unit tests
            mvnTests=${MVN_SKIP_TESTS_OPT}
            ;;
          *)
          # Flag didn't match any patern. End of COMPSs flags
          display_error "${INCORRECT_PARAMETER}"
          break
          ;;
	esac
	;;
      *)
	# Flag didn't match any patern. End of COMPSs flags
	display_error "${INCORRECT_PARAMETER}"
	break
	;;
    esac
  done
  # Shift option arguments
  shift $((OPTIND-1))

  # Parse target directory location
  if [ $# -ne 0 ]; then
    targetDir=$1
  fi
}

check_args() {
  if [ -z "$monitor" ]; then
    display_warning "${NO_MONITOR}"
    monitor=${DEFAULT_MONITOR}
  fi

  if [ -z "$bindings" ]; then
    display_warning "${NO_BINDINGS}"
    bindings=${DEFAULT_BINDINGS}
  fi

  if [ -z "$tracing" ]; then
    display_warning "${NO_TRACING}"
    tracing=${DEFAULT_TRACING}
  fi

  if [ -z "${user_exec}" ]; then
    if [ -z "${SUDO_USER}" ]; then
      # Cannot retrieve sudo user from env
      user_exec=${DEFAULT_USER}
    else
      user_exec=${SUDO_USER}
    fi
  fi

  if [ -z "${mvnTests}" ]; then
    mvnTests=${DEFAULT_MVN_TESTS}
  fi

  if [ -z "$targetDir" ]; then
    display_warning "${NO_TARGET_DIR}"
    targetDir=${DEFAULT_TARGET_DIR}
  fi
}

warn_and_log_parameters() {
  # DISPLAY WARNING
  echo " WARNING: If you want to install COMPSs in a restricted folder"
  echo "          please run this script with root permissions"
  echo "    Example: sudo -E ./buildlocal [options] <targetDir>"
  echo "    !! Remember to export JAVA_HOME on root"
  sleep 5

  echo "- Target DIR  = ${targetDir}"
  echo "- Monitor     = ${monitor}"
  echo "- Bindings    = ${bindings}"
  echo "- Tracing     = ${tracing}"
  echo "- SCRIPT_DIR  = ${SCRIPT_DIR}"
  echo "- SOURCES DIR = ${SOURCES_DIR}"
  echo "- TMP_DIR     = ${TMP_DIR}"
  sleep 5
}

install_compss() {
  # COMPILE
  echo "- Compile sources"
  cd "${SOURCES_DIR}/compss/"
  if [ "${user_exec}" == "${DEFAULT_USER}" ]; then
    echo "   (as root)"
    mvn -U clean package ${mvnTests}
  else
    echo "   (as user ${user_exec})"
    sudo -E -u "${user_exec}" mvn clean install ${mvnTests}
  fi
  cd "${SCRIPT_DIR}"

  # COPY TRUNK
  echo "- Copy trunk to tmpdir"
  rm -rf "${TMP_DIR}"
  mkdir -p "${TMP_DIR}"
  cp "${SOURCES_DIR}/changelog" "${TMP_DIR}"
  cp -r "${SOURCES_DIR}/compss" "${TMP_DIR}"
  cp -r "${SOURCES_DIR}/dependencies" "${TMP_DIR}"
  cp -r "${SOURCES_DIR}/doc" "${TMP_DIR}"
  cp -r "${SOURCES_DIR}/files" "${TMP_DIR}"
  cp "${SOURCES_DIR}/LICENSE" "${TMP_DIR}"
  cp "${SOURCES_DIR}/NOTICE" "${TMP_DIR}"
  cp "${SOURCES_DIR}/pom.xml" "${TMP_DIR}"
  cp "${SOURCES_DIR}/README.md" "${TMP_DIR}"
  cp "${SOURCES_DIR}/RELEASE_NOTES" "${TMP_DIR}"
  find . -name ".git*" -type d -exec rm -r "{}" \; # Clean git files

  # CLEAN TRUNK COMPILATION
  if [ "${user_exec}" == "${DEFAULT_USER}" ]; then
    echo "- Clean sources"
    cd "${SOURCES_DIR}/compss/"
    mvn -U clean
    cd "${SCRIPT_DIR}"
  fi

  # CREATE TARGET FOLDER
  echo "- Create target folder"
  rm -rf ${targetDir}
  mkdir -p ${targetDir}
  mkdir -p ${targetDir}/Doc
  mkdir -p ${targetDir}/Dependencies
  mkdir -p ${targetDir}/Dependencies/extrae
  mkdir -p ${targetDir}/Runtime
  mkdir -p ${targetDir}/Runtime/configuration
  mkdir -p ${targetDir}/Runtime/scripts
  mkdir -p ${targetDir}/Runtime/adaptors
  mkdir -p ${targetDir}/Runtime/connectors
  mkdir -p ${targetDir}/Runtime/cloud-conn
  mkdir -p ${targetDir}/Runtime/scheduler
  mkdir -p ${targetDir}/Tools
  mkdir -p ${targetDir}/Tools/monitor
  mkdir -p ${targetDir}/Bindings
  mkdir -p ${targetDir}/Bindings/bindings-common

  # RUNTIME DEPLOYMENT
  echo "- Copy Runtime deployment files"
  #Doc
  echo "--- Copy docs"
  find "${TMP_DIR}/doc/" -name "*.html" -delete
  cp -r "${TMP_DIR}"/doc/* ${targetDir}/Doc
  cp "${TMP_DIR}/changelog" ${targetDir}
  cp "${TMP_DIR}/LICENSE" ${targetDir}
  cp "${TMP_DIR}/NOTICE" ${targetDir}
  cp "${TMP_DIR}/README.md" ${targetDir}
  cp "${TMP_DIR}/RELEASE_NOTES" ${targetDir}

  #Dependencies
  echo "--- Copy dependencies"
  cp -r "${TMP_DIR}/dependencies/JAVA_GAT" ${targetDir}/Dependencies/
  cp -r "${TMP_DIR}/files/paraver" ${targetDir}/Dependencies/
  if [ "$tracing" == "true" ]; then
    cd "${TMP_DIR}/dependencies/extrae"
    ./install ${targetDir}/Dependencies/extrae false
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install extrae dependency"
      exit 1
    fi
    cd "${SCRIPT_DIR}"
  fi

  # Config
  echo "--- Copy configuration"
  find "${TMP_DIR}"/compss/runtime/config -name src -type d -prune -exec rm -r "{}" \;
  find "${TMP_DIR}"/compss/runtime/config -name target -type d -prune -exec rm -r "{}" \;
  find "${TMP_DIR}"/compss/runtime/config -name pom.xml -delete
  cp -r "${TMP_DIR}"/compss/runtime/config/* ${targetDir}/Runtime/configuration/
  sed -i -e 's#/opt/COMPSs/#'${targetDir}'#g'  ${targetDir}/Runtime/configuration/xml/projects/default_project.xml

  # Scripts
  echo "--- Copy scripts"
  cp -r "${TMP_DIR}"/compss/runtime/scripts/* ${targetDir}/Runtime/scripts/

  #Adaptors
  echo "--- Copy adaptors"
  find "${TMP_DIR}/compss/runtime/adaptors" -name pom.xml -delete
  rm -r "${TMP_DIR}/compss/runtime/adaptors/commons"
  path_source=${TMP_DIR}/compss/runtime/adaptors
  path_target=${targetDir}/Runtime/adaptors
  adaptors=$(ls ${path_source} | grep -v .*\.iml)
  for adaptor in $adaptors; do
    mkdir "${path_target}/$adaptor"
    mkdir "${path_target}/$adaptor/master"
    cp "${path_source}/$adaptor"/master/*.jar "${path_target}/$adaptor/master"
    if [ -f "${path_source}/$adaptor/master/properties" ]; then
      cp "${path_source}/$adaptor/master/properties" "${path_target}/$adaptor/master"
    fi
    if [ -d "${path_source}/$adaptor/worker/" ]; then
      mkdir "${path_target}/$adaptor/worker"
      cp "${path_source}/$adaptor"/worker/*.jar "${path_target}/$adaptor/worker"
    fi
    if [ -f "${path_source}/$adaptor/worker/properties" ]; then
      cp "${path_source}/$adaptor/worker/properties" "${path_target}/$adaptor/worker"
    fi
    if [ -d "${path_source}/$adaptor/scripts/" ]; then
      mkdir -p "${targetDir}/Runtime/scripts/system/adaptors/$adaptor/"
      cp -r "${path_source}/$adaptor"/scripts/* "${targetDir}/Runtime/scripts/system/adaptors/$adaptor/"
    fi
  done

  # Schedulers
  echo "--- Copy schedulers"
  rm -r "${TMP_DIR}/compss/runtime/scheduler/commons"
  find "${TMP_DIR}/compss/runtime/scheduler/" -name "*.jar" -exec cp {} ${targetDir}/Runtime/scheduler/ \;

  # Connectors
  echo "--- Copy Runtime Connectors"
  connectors=$(find "${TMP_DIR}/compss/runtime/resources/" -name "*.jar" | grep -v "cloud-conn")
  for conn in $connectors; do
    cp "$conn" ${targetDir}/Runtime/connectors/
  done
  echo "--- Copy CONN Connectors"
  connectors=$(find "${TMP_DIR}/compss/runtime/resources/" -name "*.jar" | grep "cloud-conn")
  for conn in $connectors; do
    cp "$conn" ${targetDir}/Runtime/cloud-conn/
  done

  # Engine
  echo "--- Copy engine"
  cp "${TMP_DIR}/compss/runtime/compss-engine.jar" "${targetDir}/Runtime/"

  # TOOLS DEPLOYMENT
  if [ "$monitor" == "true" ]; then
    echo "- Deploying COMPSs Tools"
    cd "${TMP_DIR}"
    TOMCAT_VER="8.5.23" #"7.0.65"
    TOMCAT_PCK_NAME="apache-tomcat-${TOMCAT_VER}.tar.gz"
    TOMCAT_URL="http://compss.bsc.es/repo/apache-tomcat/${TOMCAT_PCK_NAME}"
    wget $TOMCAT_URL
    tar xzf ${TOMCAT_PCK_NAME}
    cd "${SCRIPT_DIR}"
    mv "${TMP_DIR}/apache-tomcat-$TOMCAT_VER" "${targetDir}/Tools/monitor/apache-tomcat/"
    rm -rf "${targetDir}"/Tools/monitor/apache-tomcat/webapps/*
    rm -f "${targetDir}"/Tools/monitor/apache-tomcat/conf/server.xml
    cp -r "${TMP_DIR}"/compss/tools/monitor/target/*.war "${targetDir}/Tools/monitor/apache-tomcat/webapps/"
    cp "${TMP_DIR}"/compss/tools/monitor/target/classes/compss-monitor.conf "${targetDir}/Tools/monitor/apache-tomcat/conf/"
    cp "${TMP_DIR}"/compss/tools/monitor/target/classes/server.xml "${targetDir}/Tools/monitor/apache-tomcat/conf/"
    cp "${TMP_DIR}"/compss/tools/monitor/target/classes/*log4j* "${targetDir}/Tools/monitor/"
  fi

  # BINDINGS DEPLOYMENT
  if [ "${bindings}" == "true" ]; then
    echo "- Deploying bindings-common files"
    cd "${TMP_DIR}/compss/programming_model/bindings/bindings-common"
    ./install_common "${targetDir}/Bindings/bindings-common"
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install bindings-common"
      exit 1
    fi

    echo "- Deploying c-binding files"
    cd "${TMP_DIR}/compss/programming_model/bindings/c"
    ./install "${targetDir}/Bindings/c" "true"
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install C-binding"
      exit 1
    fi
    mkdir -p ${targetDir}/Runtime/scripts/system/c/
    cp ${targetDir}/Bindings/c/bin/* ${targetDir}/Runtime/scripts/system/c
    cp ./compss_build_app ${targetDir}/Runtime/scripts/user/
    echo "- Deploying python-binding files"
    cd "${TMP_DIR}/compss/programming_model/bindings/python"
    ./install "${targetDir}/Bindings/python" true true
    ev=$?
    if [ $ev -ne 0 ]; then
      echo "ERROR: Failed to install Python-binding"
      exit 1
    fi
    cd "${SCRIPT_DIR}"
  fi

  # ADD RUNCOMPSS TO PROFILE
  if [ "$(whoami)" == "root" ]; then
    # Script has been run as sudo
    # Insert to profile
    envFile=/etc/profile.d/compss.sh
    # Remove any previous version
    if [ -f "$envFile" ]; then
      rm $envFile
    fi
  else
    # Script has been run as normal user
    # Insert to .bashrc
    envFile=~/.bashrc
    # Launch warning
    echo " "
    echo "***************************************************************************"
    echo "* WARNING: Script is not running as sudo. Inserting COMPSs env at .bashrc *"
    echo "*          COMPSs WILL ONLY BE AVAILABLE FOR USER: $(whoami)              *"
    echo "***************************************************************************"
  fi

  echo "- Adding runcompss to profile..."
  echo "# COMPSs environment variables" >> $envFile
  echo "export PATH=\$PATH:${targetDir}/Runtime/scripts/user" >> $envFile
  echo "- Runcompss added to user profile"
  echo " "
  echo "- Adding compss-engine.jar to profile..."
  echo "export CLASSPATH=\$CLASSPATH:${targetDir}/Runtime/compss-engine.jar" >> $envFile
  echo "- compss-engine.jar added to user profile"
  echo " "
  if [ "$bindings" == "true" ]; then
    echo "- Adding c-binaries to profile..."
    echo "export PATH=\$PATH:${targetDir}/Bindings/c/bin" >> $envFile
    echo "- c-binaries added to user profile"
    echo " "
    echo "- Adding binding-common to profile..."   # Needed for jupyter notebook
    echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:${targetDir}/Bindings/bindings-common/lib:\$JAVA_HOME/jre/lib/amd64/server" >> $envFile
    echo "- binding-common library added to user profile"
    echo " "
    # Instead of importing it in the envFile, it is done with softlinks from site-packages in both python2 a python3 (if available) on the installation
    # echo "- Adding PyCOMPSs to user profile..."
    # echo "export PYTHONPATH=\$PYTHONPATH:${targetDir}/Bindings/python/$( python -c "import sys; print(sys.version_info[:][0])" )/" >> $envFile
    # echo "- PyCOMPSs added to user profile"
    echo " "
  fi

  # ADD MONITOR SCRIPT TO ETC
  if [ "$monitor" == "true" ]; then
    echo "- Add monitor script to init.d"
    sudo cp "${TMP_DIR}/compss/tools/monitor/scripts/compss-monitor" /etc/init.d/compss-monitor
    sudo chmod 755 /etc/init.d/compss-monitor

    system=$(which chkconfig | cat)
    if [ "$system" != "" ]; then
      # Suse based distrs
      sudo chkconfig --add compss-monitor
    else
      # Debian based distrs
      sudo update-rc.d compss-monitor defaults
    fi
  fi

  # ERASE TMP FILES
  echo "- Erase tmp files"
  rm -rf "${TMP_DIR}"

  # SET TARGETDIR PERMISSIONS
  echo "- Set COMPSs permissions"
  chmod -R 755 ${targetDir}
  chmod -R 777 ${targetDir}/Runtime/configuration/
}


#---------------------------------------------------
# MAIN EXECUTION
#---------------------------------------------------
  get_args "$@"
  check_args
  warn_and_log_parameters
  install_compss

  # END
  echo "Congratulations!"
  echo "COMPSs Runtime Successfully installed!"
  echo " "
  exit 0
