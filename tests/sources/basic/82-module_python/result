#!/bin/bash

#--------------------------------------------------------------------------------
# Check standard output messages
function check_standard_output () {
    output_file=$1
    runtime_log=$2

    if [ -f ${output_file} ]; then
       result_expected="------------------------------------------------------------"
       test_result=$(tail -1 ${output_file})
       if [ "${result_expected}" != "${test_result}" ]; then
          echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
          exit 1
       fi
    else
       echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
       exit 1
    fi
    # Check that ErrorManager has not generated any ERROR or FATAL message.
    if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
      echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
      exit 1
    fi
}

#--------------------------------------------------------------------------------
# Check unit test
function check_unit_test () {
    output_file=$1
    error_file=$2
    errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
    fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
    if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
      echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a ${output_file}
      exit 1
    fi
}

  # Obtain parameters
  subtest=$1
  output_file=$2
  error_file=$3
  output_file_seq=$4
  error_file_seq=$5
  target_log_folder=$6

  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  if [ $subtest == "module_0_basic" ] || [ $subtest == "module_1_class" ] ||
     [ $subtest == "module_2_constraint" ] || [ $subtest == "module_9_app_kmeans" ]; then
    #----------------------------------------------------------------------------------
    # Check no exceptions in sequential execution
    if grep -q "Exception" "$output_file_seq" | grep -q "segmentation" "$output_file_seq"; then
       echo "Test $subtest in sequential mode - FAILED"
       exit 1
    else
       echo "Test $subtest in sequential mode - OK"
    fi
    #----------------------------------------------------------------------------------
    # Check output standard out status of test
    check_standard_output $output_file $runtime_log
    #----------------------------------------------------------------------------------
    # Grep for unit test errors (ERROR or FAIL)
    check_unit_test $output_file $error_file
    exit 0

  elif [ $subtest == "module_3_binary" ] || [ $subtest == "module_3_binary_constrained" ] ||
       [ $subtest == "module_4_ompss" ] || [ $subtest == "module_4_ompss_constrained" ] ||
       [ $subtest == "module_5_mpi" ] || [ $subtest == "module_5_mpi_constrained" ] ||
       [ $subtest == "module_6_opencl" ] || [ $subtest == "module_6_opencl_constrained" ] ||
       [ $subtest == "module_7_implements" ] ||
       [ $subtest == "module_8_decaf" ] || [ $subtest == "module_8_decaf_constrained" ]; then

     #----------------------------------------------------------------------------------
     # Check that sequential logs have the Exception message
     if grep -q "Exception" "$error_file_seq" | grep -q "Traceback" "$error_file_seq"; then
       echo "The exception is intended."
       echo "Test $subtest in sequential mode shows the exception - OK"
     else
       echo "Test $subtest in sequential mode DOES NOT show the exception - FAILED"
       exit 1
     fi
     #----------------------------------------------------------------------------------
     # Check output standard out status of test
     check_standard_output $output_file $runtime_log
     #----------------------------------------------------------------------------------
     # Grep for unit test errors (ERROR or FAIL)
     check_unit_test $output_file $error_file
     exit 0

  else
    echo "COULD NOT EVALUATE THE RESULT:"
    echo "  - WRONG MODULE FILE --> $subtest"
    exit 1
  fi
