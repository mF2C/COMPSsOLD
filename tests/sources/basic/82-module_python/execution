#!/bin/bash

#--------------------------------------------------------------------------------
# Clean orphans
clean_orphans() {
  # Sleep before cleanning test environment
  sleep 1s

  # Clean possible remaining test processes
  ps x -o  "%r %c" | grep "runcompss" | awk '{ print $1 }' | xargs -r -i kill -9 -{}
  ps -elfa | grep "java" | grep "es.bsc.compss.nio.worker.NIOWorker" | awk '{ print $4 }' | xargs -r kill -9
  ps -elfa | grep piper | grep -v grep | awk '{ print $4 }' | xargs -r kill -9

  # Sleep after cleanning test environment
  sleep 1s
}

#--------------------------------------------------------------------------------
# Sequential execution
function seq_app () {
  local expectedTime=$1
  local base_app_dir=$2
  local app=$3
  local output_log_seq=$4
  local error_log_seq=$5

  timeout --signal=2 "$expectedTime" \
    python "${base_app_dir}"/src/"${app}".py > >(tee "${output_log_seq}") 2> >(tee "${error_log_seq}" >&2)

  # Check segmentation fault
  if [[ "$?" = 139 ]]; then
    echo "[ERROR] Something really wrong happened during the $app sequential execution: segmentation fault" >> "${output_log}"
    exit 139
  fi

  # Check timeout
  if [[ "$?" = "124" ]]; then
     # Report timeout
     echo "[WARNING] Python Application timed out" >> "${output_log}"
     exit 124
  fi
  exitValue=$?
}

#--------------------------------------------------------------------------------
# Execute application
function execute () {
  local app=$1
  local target_log_folder=$2
  local retryNum=$3
  local expectedTime=$4
  local base_app_dir=$5
  local comm=$6
  local COMPSs_log_folder=$7
  local runcompss_opts=$8

  local output_log="${target_log_folder}/${app}_python_test_0${retryNum}.outputlog"
  local error_log="${target_log_folder}/${app}_python_test_0${retryNum}.errorlog"
  local output_log_seq="${target_log_folder}/${app}_python_test_0${retryNum}_seq.outputlog"
  local error_log_seq="${target_log_folder}/${app}_python_test_0${retryNum}_seq.errorlog"

  # Sequential execution
  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  # This is due to some cases the sequential execution has to throw an Exception
  # while the execution with PyCOMPSs has to work fine (e.g. use of @binary).
  if seq_app "$expectedTime" "${base_app_dir}" "${app}" "${output_log_seq}" "${error_log_seq}" ; then
    if [ $exitValue -eq 0 ]; then
      echo "Sequential execution of $app finished."
    else
      echo "Something wrong happened during the $app sequential execution."
      exit $?
    fi
  fi

  # Execution with pycompss module through python -m
  # shellcheck disable=SC2086
  timeout --signal=2 "$expectedTime" python -m pycompss \
     --project="${base_app_dir}"/project.xml \
     --resources="${base_app_dir}"/resources.xml \
     --comm="$comm" \
     --pythonpath="${base_app_dir}"/src \
     --lang=python \
     --python_interpreter="$pythonInterpreter" \
     --debug \
     ${runcompss_opts} \
     "${base_app_dir}"/src/"${app}".py > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

  # Check timeout
  if [[ "$?" = "124" ]]; then
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/"${app}".py_0"${retryNum}"/* "${target_log_folder}"
     # Report timeout
     echo "[WARNING] Python Application timed out" >> "${output_log}"
     exit 124
  else
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/"${app}".py_0"${retryNum}"/* "${target_log_folder}"
  fi
  echo "Parallel execution of $app finished."

  # Check result of both sequential and parallel executions
  "${base_app_dir}"/result "$app" "${output_log}" "${error_log}" "${output_log_seq}" "${error_log_seq}" "${target_log_folder}"
}

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retryNum=$7
  pythonInterpreter=$8

  #----------------------------------------------------------------------------------
  # Check that the pycompss module is available in the environment
  python -c "import pycompss"
  errCode=$?
  if [ $errCode -ne  0 ] ; then
    echo "THE pycompss MODULE IS NOT AVAILABLE IN THE SYSTEM."
    echo "CHECK THAT PYTHONPATH CONTAINS THE APPROPIATE MODULE PATH."
    exit $errCode
  fi

  #----------------------------------------------------------------------------------
  # Global exit variable
  exitValue=0

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Run application 0 - Basic
  app="module_0_basic"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 0 - Basic"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="Test $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 1 - Class
  app="module_1_class"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 1 - Class"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 2 - Constraint
  app="module_2_constraint"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 2 - Constraint"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 3 - Binary
  app="module_3_binary"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 3 - Binary"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 3 - Binary Constrained
  app="module_3_binary_constrained"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 3 - Binary with Constraint"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 4 - OMPSs
  app="module_4_ompss"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 4 - OMPSs"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 4 - OMPSs Constrained
  app="module_4_ompss_constrained"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 4 - OMPSs with Constraint"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 5 - MPI
  app="module_5_mpi"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 5 - MPI"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 5 - MPI Constrained
  app="module_5_mpi_constrained"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 5 - MPI with Constraint"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 6 - OpenCL
  app="module_6_opencl"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 6 - OpenCL -- SKIPPED."
  # execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - SKIPPED"

  #----------------------------------------------------------------------------------
  # Run application 6 - OpenCL Constrained
  app="module_6_opencl_constrained"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 6 - OpenCL with Constraint -- SKIPPED."
  # execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - SKIPPED"

  #----------------------------------------------------------------------------------
  # Run application 7 - Implements
  app="module_7_implements"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 7 - Implements"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 8 - Decaf
  app="module_8_decaf"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 8 - Decaf"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 8 - Decaf Constrained
  app="module_8_decaf_constrained"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 8 - Decaf with Constraint"
  execute "$app" "${target_log_folder}" "$retryNum" "40s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Run application 9 - Kmeans
  app="module_9_app_kmeans"
  echo
  echo "*** RUNNING PYTHON AS MODULE TEST 9 - Kmeans application"
  execute "$app" "${target_log_folder}" "$retryNum" "240s" "${base_app_dir}" "$comm" "${COMPSs_log_folder}" "$runcompss_opts"
  accumulated="${accumulated}\nTest $app - OK"

  #----------------------------------------------------------------------------------
  # Show accumulated results:
  echo
  echo "-------------"
  echo "TESTS RESULT:"
  echo "-------------"
  echo -e "$accumulated"

  #----------------------------------------------------------------------------------
  # Clean orphans
  clean_orphans

  #----------------------------------------------------------------------------------
  # Return execution status
  exit 0
