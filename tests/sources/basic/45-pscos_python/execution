#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retryNum=$7

  # Global exit variable
  exitValue=0

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Create storage Conf
  storageConf=${target_log_folder}/storage.conf
  cat > "$storageConf" << EOF
COMPSsWorker01
EOF

  # Add trap to clean folder
  clean() {
    rm -rf /tmp/PSCO/
  }
  trap clean EXIT 

  # Create the persistent folders for the Dummy Storage
  #mkdir -p /tmp/PSCO/$(hostname)
  #mkdir -p /tmp/PSCO/COMPSsWorker01
  
  #----------------------------------------------------------------------------------
  # Set Storage implementation location
  storageImplPath=${base_app_dir}/jars/compss-dummyPSCO.jar

  #----------------------------------------------------------------------------------
  # Run application 1 - Test
  echo
  echo "*** RUNNING PYTHON PSCOs TEST"
  output_log="${target_log_folder}/python_test_0${retryNum}.outputlog"
  error_log="${target_log_folder}/python_test_0${retryNum}.errorlog"
  expectedTime=80s

  # shellcheck disable=SC2086
  timeout --signal=2 $expectedTime "${COMPSs_exec}" \
     --project="${base_app_dir}"/project.xml \
     --resources="${base_app_dir}"/resources.xml \
     \
     --comm="$comm" \
     \
     --lang=python \
     --pythonpath="${base_app_dir}"/src \
     \
     --debug \
     ${runcompss_opts} \
     \
     --classpath=${storageImplPath} \
     --storage_conf=${storageConf} \
     \
     "${base_app_dir}"/src/pscos.py > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

  # Check timeout
  if [[ "$?" = "124" ]]; then
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/pscos.py_0"${retryNum}"/* "${target_log_folder}"

     # Report timeout
     echo "[WARNING] Python Application timed out" >> "${output_log}"
     exitValue=124
  else
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/pscos.py_0"${retryNum}"/* "${target_log_folder}"

     # Check result
     "${base_app_dir}"/result "${output_log}" "${error_log}" "${target_log_folder}"
     exitValue=$?
  fi

  #----------------------------------------------------------------------------------
  # Clean PSCO files if any
  rm -f /tmp/*.PSCO

  #----------------------------------------------------------------------------------
  # Return execution status
  exit $exitValue
