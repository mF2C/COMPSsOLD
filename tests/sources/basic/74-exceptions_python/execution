#!/bin/bash

  #--------------------------------------------------------------------------------
  # Clean orphans
  clean_orphans() {
    # Sleep before cleanning test environment
    sleep 1s
  
    # Clean possible remaining test processes
    ps x -o  "%r %c" | grep "runcompss" | awk '{ print $1 }' | xargs -r -i kill -9 -{}
    ps -elfa | grep "java" | grep "es.bsc.compss.nio.worker.NIOWorker" | awk '{ print $4 }' | xargs -r kill -9
    ps -elfa | grep piper | grep -v grep | awk '{ print $4 }' | xargs -r kill -9

    # Sleep after cleanning test environment
    sleep 1s
  }


  #--------------------------------------------------------------------------------
  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retryNum=$7

  # Global exit variable
  exitValue=0

  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project.xml

  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/

  #----------------------------------------------------------------------------------
  # Run application 1 - Test exception in Master before submitting tasks

  echo
  echo "*** RUNNING PYTHON APPLICATION TEST - EXCEPTIONS IN MASTER BEFORE SUBMITTING TASKS"

  function app1 {
      local output_log="${target_log_folder}/exception_python_1${retryNum}.outputlog"
      local error_log="${target_log_folder}/exception_python_1${retryNum}.errorlog"
      local app_log_folder="${target_log_folder}/execInMasterBeforeTasks/"
      mkdir -p "${app_log_folder}"

      expectedTime=120s

      # shellcheck disable=SC2086
      timeout --signal=2 $expectedTime "${COMPSs_exec}" \
         --project="${base_app_dir}"/project.xml \
         --resources="${base_app_dir}"/resources.xml \
         \
         --comm="$comm" \
         \
         --lang=python \
         --pythonpath="${base_app_dir}"/src \
         \
         --debug \
         ${runcompss_opts} \
         \
         "${base_app_dir}"/src/excInMasterBeforeTasks.py > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

      # Check timeout
      if [[ "$?" = "124" ]]; then
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInMasterBeforeTasks.py_0"${retryNum}"/* "${app_log_folder}"
         # Report timeout
         echo "[WARNING] Python Application timed out" | tee -a "${output_log}"
         exitValue=124
      else
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInMasterBeforeTasks.py_0"${retryNum}"/* "${app_log_folder}"
         # Check result
         "${base_app_dir}"/resultInMaster "${output_log}" "${error_log}" "${app_log_folder}"
         exitValue=$?
      fi
  }

  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  if app1; then
    if [ $exitValue -eq 0 ]; then
      echo "Exception captured. Traceback and Exception message found - OK" 
    else
      echo "The traceback or the exception message could not be found - ERROR"
      exit 1
    fi
  fi

  # wait for all processess to be killed by the OS
  sleep 5
  clean_orphans

  #----------------------------------------------------------------------------------
  #Run application 2 - Test exception in Master after submitting tasks before sync

  echo
  echo "*** RUNNING PYTHON APPLICATION TEST - EXCEPTIONS IN MASTER AFTER SUBMITTING TASKS BEFORE SYNC"

  function app2 {
      local output_log="${target_log_folder}/exception_python_2${retryNum}.outputlog"
      local error_log="${target_log_folder}/exception_python_2${retryNum}.errorlog"
      local app_log_folder="${target_log_folder}/execInMasterAfterTasks/"
      mkdir -p "${app_log_folder}"

      expectedTime=180s

      # shellcheck disable=SC2086
      timeout --signal=2 $expectedTime "${COMPSs_exec}" \
         --project="${base_app_dir}"/project.xml \
         --resources="${base_app_dir}"/resources.xml \
         \
         --comm="$comm" \
         \
         --lang=python \
         --pythonpath="${base_app_dir}"/src \
         \
         --debug \
         ${runcompss_opts} \
         \
         "${base_app_dir}"/src/excInMasterAfterTasks1.py > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

      # Check timeout
      if [[ "$?" = "124" ]]; then
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInMasterAfterTasks1.py_0"${retryNum}"/* "${app_log_folder}"
         # Report timeout
         echo "[WARNING] Python Application timed out" | tee -a "${output_log}"
         exitValue=124
      else
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInMasterAfterTasks1.py_0"${retryNum}"/* "${app_log_folder}"
         # Check result
         "${base_app_dir}"/resultInMasterAfterTasks1 "${output_log}" "${error_log}" "${app_log_folder}"
         exitValue=$?
      fi
  }

  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  if app2; then
    if [ $exitValue -eq "0" ]; then
      echo "Exception captured. Traceback and Exception message found - OK"
    else
      echo "The traceback or the exception message could not be found - ERROR"
      exit 1
    fi
  fi

  # wait for all processess to be killed by the OS
  sleep 5
  clean_orphans

  #----------------------------------------------------------------------------------
  #Run application 3 - Test exception in Master after submitting tasks before sync

  echo
  echo "*** RUNNING PYTHON APPLICATION TEST - EXCEPTIONS IN MASTER AFTER SUBMITTING TASKS AFTER SYNC"

  function app3 {
      local output_log="${target_log_folder}/exception_python_3${retryNum}.outputlog"
      local error_log="${target_log_folder}/exception_python_3${retryNum}.errorlog"
      local app_log_folder="${target_log_folder}/execInMasterAfterTasks/"
      mkdir -p "${app_log_folder}"

      expectedTime=180s

      # shellcheck disable=SC2086
      timeout --signal=2 $expectedTime "${COMPSs_exec}" \
         --project="${base_app_dir}"/project.xml \
         --resources="${base_app_dir}"/resources.xml \
         \
         --comm="$comm" \
         \
         --lang=python \
         --pythonpath="${base_app_dir}"/src \
         \
         --debug \
         ${runcompss_opts} \
         \
         "${base_app_dir}"/src/excInMasterAfterTasks2.py > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

      # Check timeout
      if [[ "$?" = "124" ]]; then
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInMasterAfterTasks2.py_0"${retryNum}"/* "${app_log_folder}"
         # Report timeout
         echo "[WARNING] Python Application timed out" | tee -a "${output_log}"
         exitValue=124
      else
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInMasterAfterTasks2.py_0"${retryNum}"/* "${app_log_folder}"
         # Check result
         "${base_app_dir}"/resultInMasterAfterTasks2 "${output_log}" "${error_log}" "${app_log_folder}"
         exitValue=$?
      fi
  }

  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  if app3; then
    if [ $exitValue -eq "0" ]; then
      echo "Exception captured. Traceback and Exception message found - OK"
    else
      if [ $exitValue -eq "1" ]; then
          echo "The traceback or the exception message could not be found - ERROR"
          exit 1
      else
          echo "Invalid application result - ERROR"
          exit 1
      fi
    fi
  fi

  # wait for all processess to be killed by the OS
  sleep 5
  clean_orphans

  #----------------------------------------------------------------------------------
  #Run application 4 - Test exception in Worker within task

  echo
  echo "*** RUNNING PYTHON APPLICATION TEST - EXCEPTIONS IN WORKER WITHIN TASK"

  function app4 {
      local output_log="${target_log_folder}/exception_python_4${retryNum}.outputlog"
      local error_log="${target_log_folder}/exception_python_4${retryNum}.errorlog"
      local app_log_folder="${target_log_folder}/execInTask/"
      mkdir -p "${app_log_folder}"

      expectedTime=180s

      # shellcheck disable=SC2086
      timeout --signal=2 $expectedTime "${COMPSs_exec}" \
         --project="${base_app_dir}"/project.xml \
         --resources="${base_app_dir}"/resources.xml \
         \
         --comm="$comm" \
         \
         --lang=python \
         --pythonpath="${base_app_dir}"/src \
         \
         --debug \
         ${runcompss_opts} \
         \
         "${base_app_dir}"/src/excInTask.py > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)

      # Check timeout
      if [[ "$?" = "124" ]]; then
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInTask.py_0"${retryNum}"/* "${app_log_folder}"
         # Report timeout
         echo "[WARNING] Python Application timed out" | tee -a "${output_log}"
         exitValue=124
      else
         # Copy LOG files
         cp -rf "${COMPSs_log_folder}"/excInTask.py_0"${retryNum}"/* "${app_log_folder}"
         # Check result
         "${base_app_dir}"/resultInWorker "${output_log}" "${error_log}" "${app_log_folder}"
         exitValue=$?
      fi
  }

  # Kind of a try catch, but without else... allows to continue when the exeption are raised.
  if app4; then
    if [ $exitValue -eq "0" ]; then
      echo "Exception captured. Traceback and Exception message found - OK"
    else
      if [ $exitValue -eq "1" ]; then
          echo "The traceback or the exception message could not be found - ERROR"
          exit 1
      else
          echo "Invalid application result - ERROR"
          exit 1
      fi
    fi
  fi

  #----------------------------------------------------------------------------------
  # If this point is reached, everything has gone OK
  echo "----------------------------------"
  echo "--------   SUMMARY   -------------"
  echo "----------------------------------"
  echo "Exceptions at master before submitting tasks: OK"
  echo "Exceptions at master after submitting tasks before sync: OK"
  echo "Exceptions at master after submitting tasks after sync: OK"
  echo "---------------------------------"
  echo "Exceptions at worker: OK"
  echo "---------------------------------"

  #----------------------------------------------------------------------------------
  # Return execution status
  exit $exitValue

