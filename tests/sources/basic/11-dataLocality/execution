#!/bin/bash

  # Obtain parameters
  COMPSs_exec=$1
  comm=$2
  runcompss_opts=$3
  base_app_dir=$4
  COMPSs_log_folder=$5
  target_log_folder=$6
  retryNum=$7
  
  # Global exit variable
  exitValue=0
  
  #----------------------------------------------------------------------------------
  # Generate Project.xml according to system
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project_basicTest.xml
  sed -i '/<InstallDir>/c<InstallDir>'"${COMPSS_HOME}"'<\/InstallDir>' "${base_app_dir}"/project_complexTest.xml
  
  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/
  mkdir -p /tmp/COMPSsWorker02/
  
  #----------------------------------------------------------------------------------
  # Run application 1 - Basic Test
  echo
  echo "*** RUNNING JAVA APPLICATION DATA LOCALITY - Basic Test"
  log_folder="${target_log_folder}/basicTest"
  mkdir -p "${log_folder}"
  output_log="${log_folder}/dataLocality_basicTest_0${retryNum}.outputlog"
  error_log="${log_folder}/dataLocality_basicTest_0${retryNum}.errorlog"
  
  expectedTime=60s
  numTasks=5
  fileOut="${log_folder}/dataLocality_basicTest.out"
  echo "CREATE" >> "$fileOut"

  # shellcheck disable=SC2086
  timeout --signal=2 $expectedTime "${COMPSs_exec}" \
     --project="${base_app_dir}"/project_basicTest.xml \
     --resources="${base_app_dir}"/resources_basicTest.xml \
     \
     --comm="$comm" \
     \
     --debug \
     ${runcompss_opts} \
     \
     --classpath="${base_app_dir}"/dataLocality.jar \
     \
     basicTest.DataLocality $numTasks $fileOut > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)
  errCode=$?
  
  # Check timeout
  ev1=0
  if [[ "$errCode" = "124" ]]; then
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/basicTest.DataLocality_0"${retryNum}"/* "${log_folder}"
     
     # Report time out
     echo "[WARNING] Java Application timed out" >> "${output_log}"
     ev1=124
  else
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/basicTest.DataLocality_0"${retryNum}"/* "${log_folder}"
  
     # Check result
     "${base_app_dir}"/result_basicTest "${output_log}" "${log_folder}"
     ev1=$?
  fi
  
  #----------------------------------------------------------------------------------
  # Sleep between applications
  sleep 1s  
  
  #----------------------------------------------------------------------------------
  # Create all working dir folders
  mkdir -p /tmp/COMPSsWorker01/
  mkdir -p /tmp/COMPSsWorker02/
  mkdir -p /tmp/COMPSsWorker03/
  mkdir -p /tmp/COMPSsWorker04/
  
  #----------------------------------------------------------------------------------
  # Run application 2 - Complex Test
  echo
  echo "*** RUNNING JAVA APPLICATION DATA LOCALITY - Complex Test"
  log_folder="${target_log_folder}/complexTest"
  mkdir -p "${log_folder}"
  output_log="${log_folder}/dataLocality_complexTest_0${retryNum}.outputlog"
  error_log="${log_folder}/dataLocality_complexTest_0${retryNum}.errorlog"
  expectedTime=2400s
  msize=4

  # shellcheck disable=SC2086
  timeout --signal=2 $expectedTime "${COMPSs_exec}" \
     --project="${base_app_dir}"/project_complexTest.xml \
     --resources="${base_app_dir}"/resources_complexTest.xml \
     \
     --comm="$comm" \
     \
     --debug \
     ${runcompss_opts} \
     \
     --classpath="${base_app_dir}"/dataLocality.jar \
     \
     complexTest.DataLocality $msize > >(tee "${output_log}") 2> >(tee "${error_log}" >&2)
  errCode=$?
  
  # Check timeout
  ev2=0
  if [[ "$errCode" = "124" ]]; then
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/complexTest.DataLocality_0"${retryNum}"/* "${log_folder}"
     
     # Report time out
     echo "[WARNING] Java Application timed out" >> "${output_log}"
     ev2=124
  else
     # Copy LOG files
     cp -rf "${COMPSs_log_folder}"/complexTest.DataLocality_0"${retryNum}"/* "${log_folder}"
    
     # Check result
     "${base_app_dir}"/result_complexTest "${output_log}" "${log_folder}" "${base_app_dir}"
     ev2=$?
  fi
  
  #----------------------------------------------------------------------------------
  # Return execution status
  if [ $ev1 -gt $ev2 ]; then
     exitValue=$ev1
  else
     exitValue=$ev2
  fi
  exit $exitValue
