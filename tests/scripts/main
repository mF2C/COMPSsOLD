#!/bin/bash

  #-----------------------------------------------------------------------------------------------
  # SCRIPT CONSTANTS
  #-----------------------------------------------------------------------------------------------
  ERROR_ENV_CONFIG="ERROR: Incorrect number of parameters. Environment or configuration not found"
  ERROR_ENV="ERROR: Empty environment parameter"
  ERROR_BAD_ENV="ERROR: BAD ENVIRONMENT PARAMETER."
  ERROR_SKIP_VALUE="ERROR: Invalid skip value. Only true / false allowed"
  ERROR_ONLY_LANG="ERROR: Invalid only lang value. Only NONE / JAVA / PYTHON / C allowed"
  ERROR_RETRY_VALUE="ERROR: Invalid retry value. Only integers bigger or equal to 1"
  ERROR_CONFIG="ERROR: Empty configuration parameter"
  ERROR_INVALID_ENV="ERROR: Unrecognised environment"
  ERROR_LOAD_CONFIG="ERROR : JAVA_HOME NEEDS TO BE SET ON THE CONFIGURATION FILE.CFG"

  JAVA_LANG="JAVA"
  PYTHON_LANG="PYTHON"
  C_LANG="C"
  NONE_LANG="NONE"

  DEFAULT_SKIP=true
  DEFAULT_RETRY=3
  DEFAULT_ONLY_LANG=${NONE_LANG}

  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  #-----------------------------------------------------------------------------------------------
  # Display functions
  #-----------------------------------------------------------------------------------------------
  # Displays usage
  info() {
     cat << EOT
Usage: $0 [options] environment configurationFile

* Options:
    -h                   Displays this help message
    -n                   Displays test numbering
    -s                   Enables test skipping
    -S                   Disables test skipping
    -r                   Sets test retries to ${DEFAULT_RETRY}
    -R                   Disables test retries

    --help               Displays this help message
    --numbering          Displays test numbering
    --skip=<boolean>     Sets skip boolean to given value (true / false)
    --skip               Enables test skipping
    --no-skip            Disables test skipping
    --retry=<int>        Sets test retries to given value. Must be greater or equal to 1
    --retry              Sets test retries to ${DEFAULT_RETRY}
    --only-lang=<string> Executes only the tests in the specified language
                         Default: ${DEFAULT_ONLY_LANG}
    --only-java          Executes only the JAVA tests
    --only-python        Executes only the PYTHON tests
    --only-c             Executes only the C/C++ tests

* Environment:
    - local / local_X
    - devel_X
    - cloudvpn / cloudvpn_X

* ConfigurationFile
    - Filename under ../configurations folder or complete path for configuration file

For further information look the README file or the documentation folder

EOT
  }

  # Displays test numbering
  numbering() {
     echo "************************************"
     echo "* Displaying local tests numbering *"
     echo "************************************"
     for entry in "${SCRIPT_DIR}"/../sources/basic/*; do
         name=$(basename "$entry")
         if [ "$name" != "pom.xml" ]; then
            echo "- $name"
         fi
     done
     echo " "
     echo " For further information look the README file or the documentation folder"
     echo " "
  }

  # Displays parsing arguments errors
  display_error() {
    local error_msg=$1

    echo "$error_msg"
    echo " "

    info
    exit 1
  }

  #-----------------------------------------------------------------------------------------------
  # Parse arguments
  #-----------------------------------------------------------------------------------------------
  get_args() {
    # Parse script Options
    while getopts hnsSrR-: flag; do
      # Treat the argument
      case "$flag" in
        h)
          # Display help
          info
          exit 0
          ;;
        n)
          # Display numbering
          numbering
          exit 0
          ;;
        s)
          # Enable skip test checker
          skip=true
          ;;
        S)
          # Disable skip test checker
          skip=false
          ;;
        r)
          # Enable default retry
          retry=${DEFAULT_RETRY}
          ;;
        R)
          # Disable retry
          retry=1
          ;;
        -)
          # Check more complex arguments
          case "$OPTARG" in
            help)
              # Display help
              info
              exit 0
              ;;
            numbering)
              # Display numbering
              numbering
              exit 0
              ;;
            skip=*)
              skip=${OPTARG//skip=/}
              ;;
            skip)
              skip=true
              ;;
            no-skip)
              skip=false
              ;;
            retry=*)
              retry=${OPTARG//retry=/}
              ;;
            retry)
              retry=${DEFAULT_RETRY}
              ;;
            only-lang=*)
              onlyLang=${OPTARG//only-lang=/}
              ;;
            only-java)
              onlyLang=${JAVA_LANG}
              ;;
            only-python)
              onlyLang=${PYTHON_LANG}
              ;;
            only-c)
              onlyLang=${C_LANG}
              ;;
            *)
              # Flag didn't match any patern. Raise exception
              display_error "Bad argument: $OPTARG"
              ;;
          esac
          ;;
        *)
          # Flag didn't match any patern. End of COMPSs flags
          break
          ;;
      esac
    done

    # Shift script options
    shift $((OPTIND-1))

    # Parse environment and configuration
    if [ $# -ne 2 ]; then
      display_error "${ERROR_ENV_CONFIG}"
    else
      environment=$1
      configuration=$2
    fi
  }

  check_args() {
    if [ -z "${skip}" ]; then
      skip=${DEFAULT_SKIP}
    fi

    if [ "${skip}" != "true" ] && [ "${skip}" != "false" ]; then
      display_error "${ERROR_SKIP_VALUE}"
    fi

    if [ -z "${onlyLang}" ]; then
      onlyLang=${DEFAULT_ONLY_LANG}
    fi
    onlyLang=$(echo "${onlyLang}" | tr '[:lower:]' '[:upper:]')

    if [ "${onlyLang}" != "${NONE_LANG}" ] && [ "${onlyLang}" != "${JAVA_LANG}" ] && [ "${onlyLang}" != "${PYTHON_LANG}" ] && [ "${onlyLang}" != "${C_LANG}" ]; then
      display_error "${ERROR_ONLY_LANG}"
    fi

    if [ -z "${retry}" ]; then
      retry=${DEFAULT_RETRY}
    fi

    if [ ${retry} -le 0 ]; then
      display_error "${ERROR_RETRY_VALUE}"
    fi

    if [ -z "${environment}" ]; then
      display_error "${ERROR_ENV}"
    fi

    if [ "${environment:0:5}" != "local" ] && [ "${environment:0:5}" != "cloud" ] && [ "${environment:0:5}" != "devel" ]; then
      display_error "${ERROR_BAD_ENV}"
    fi

    if [ -z "${configuration}" ]; then
      display_error "${ERROR_CONFIG}"
    fi
  }

  #-----------------------------------------------------------------------------------------------
  # Tests executors
  #-----------------------------------------------------------------------------------------------
  execute_tests() {
    if [ "${environment:0:5}" == "local" ]; then
      execute_tests_local
    elif [ "${environment:0:8}" = "cloudvpn" ]; then
      execute_tests_cloudvpn
    elif [ "${environment:0:5}" == "devel" ]; then
      execute_tests_devel
    else
      display_error "${ERROR_INVALID_ENV}"
    fi
  }

  execute_tests_local() {
    echo "Executing tests in LOCAL mode"
    logArguments

    # Set default environment variables
    user=$(whoami)
    if [[ $environment = *_* ]]; then
       target_base_dir="/home/$user/tests_specific_local"
    else
       target_base_dir="/home/$user/tests_all_local"
    fi
    COMPSS_HOME="/opt/COMPSs/"
    comm="es.bsc.compss.nio.master.NIOAdaptor"
    runcompss_opts="-d"
    # Set environment variables from configuration file
    source_configuration

    # Set the rest of environment variables
    source_base_dir="${SCRIPT_DIR}/../sources"
    COMPSs_log_folder="$HOME/.COMPSs"
    COMPSs_exec="$COMPSS_HOME/Runtime/scripts/user/runcompss"

    # Export base variables
    export COMPSS_HOME=$COMPSS_HOME
    export JAVA_HOME=$JAVA_HOME

    # Select between one execution or all tests
    if [[ $environment = *_* ]]; then
      execute_tests_local_specific
    else
      execute_tests_local_all
    fi
  }

  execute_tests_local_specific() {
    test=$(echo "${environment:6}" | sed 's/.*0 *\([1-9]*[0-9]\).*/\1/')

    # Add 0 on numbers lower than 10
    if [ "$test" -lt 10 ]; then
      test=0$test
    fi

    # Select appName
    for path in "${source_base_dir}"/basic/*; do
      name=$(basename "$path")
      if [[ "$name" = "$test"* ]]; then
        appName="$name"
        break
      fi
    done

    if [ -z "$appName" ]; then
      echo "[ERROR] Cannot find source folder"
      echo "******* Allowed folders are: "
      ls "${source_base_dir}"/basic/
      exit 1
    fi

    # Compile tests
    "${SCRIPT_DIR}"/compile_sources_local_specific "${source_base_dir}" "$appName"
    if [ $? -ne 0 ]; then
      exit 1
    fi

    lang=${appName##*_}
    # Explanation:
    #   appName - from variable
    #   ## - greedy front trim
    #   * - token match anything
    #   _ - until the last '_'
    if [ $lang != "python" ] && [ $lang != "c" ]; then
      # java tests do not end with _java
      lang="java"
    fi

    # Deploy tests
    "${SCRIPT_DIR}"/deploy_sources_local_specific "${source_base_dir}" "$appName" "$test" "${target_base_dir}" "${lang}"
    if [ $? -ne 0 ]; then
      exit 1
    fi

    # Erase IT folder
    echo "---- Erase current .COMPSs folder ${COMPSs_log_folder}"
    rm -rf "${COMPSs_log_folder}"

    # Execute tests
    echo "---- Executing specific test "
    "${SCRIPT_DIR}"/execute_local_specific "${test}" "${COMPSs_exec}" "${comm}" "${runcompss_opts}" "${target_base_dir}" "${COMPSs_log_folder}" "${skip}" "${retry}" "${appName}" "${lang}"
    if [ $? -ne 0 ]; then
      echo "ERROR: executing specific local test"
      exit 1
    else
      exit 0
    fi
  }

  execute_tests_local_all() {
    # Compile tests
    "${SCRIPT_DIR}"/compile_sources_local "${source_base_dir}"
    if [ $? -ne 0 ]; then
      exit 1
    fi

    # Deploy tests
    "${SCRIPT_DIR}"/deploy_sources_local "${source_base_dir}" "${target_base_dir}" "${onlyLang}"
    if [ $? -ne 0 ]; then
      exit 1
    fi

    # Erase COMPSs log folder
    echo "---- Erase current .COMPSs folder"
    rm -rf "${COMPSs_log_folder}"

    # Execute tests
    "${SCRIPT_DIR}"/execute_local "${COMPSs_exec}" "${comm}" "${runcompss_opts}" "${target_base_dir}" "${COMPSs_log_folder}" "${skip}" "${retry}"
    if [ $? -ne 0 ]; then
      exit 1
    else
      exit 0
    fi
  }

  execute_tests_cloudvpn() {
    echo "Executing tests in CLOUDVPN mode"
    logArguments

    # Global exit variable
    exitValue=0

    # Set default environment variables
    user=$(whoami)
    target_base_dir="/home/$user/tests_cloud_vpn"
    logs_location="/home/$user"
    COMPSS_HOME="/opt/COMPSs/"
    connector_server="https://bscgrid20.bsc.es:11443/"
    connector_jar="rocci-conn.jar"
    connector_class="es.bsc.conn.rocci.ROCCI"
    comm=es.bsc.compss.nio.master.NIOAdaptor
    runcompss_opts="-d"
    remote_COMPSs=/opt/

    # Set environment variables from configuration file
    source_configuration

    # Set the rest of environment variables
    COMPSs_location="${COMPSS_HOME}"
    COMPSs_exec="${COMPSS_HOME}/Runtime/scripts/user/runcompss"
    source_base_dir="${SCRIPT_DIR}/../sources/cloud"
    log_folder="${target_base_dir}/logs"
    template_id=107
    vm_type="ubuntu"
    cloud_owner="jenkins-test"
    COMPSs_log_folder="$HOME/.COMPSs"

    # Export base variables
    export COMPSS_HOME=$COMPSS_HOME
    export JAVA_HOME=$JAVA_HOME

    # Compile sources cloud
    "${SCRIPT_DIR}"/compile_sources_cloud_vpn "${source_base_dir}"

    # Deploy tests
    "${SCRIPT_DIR}"/deploy_sources_cloud_vpn "${source_base_dir}" "${target_base_dir}" "${log_folder}" "${COMPSs_location}" "${cloud_owner}" "${connector_server}" "${connector_jar}" "${connector_class}" "${remote_COMPSs}"
    if [ $? -ne 0 ]; then
      exit 1
    fi

    # Get test number to execute
    if [ "${environment}" = "cloudvpn" ]; then
      num_test="all"
    else
      num_test=$(echo "${environment:9}" | sed 's/.*0 *\([1-9]*[0-9]\).*/\1/')
    fi
    # Check it's not faultTolerance test (not allowed on VPN mode)
    if [ "${num_test}" = "1" ]; then
      echo "[ERROR] TEST NUMBER 1 IS NOT ALLOWED ON VPN MODE"
      exit 1
    fi

    # Erase COMPSs log folder
    echo "---- Erase current .COMPSs folder"
    rm -rf "${COMPSs_log_folder}"

    # Execute tests
    "${target_base_dir}"/execute_cloud_tests "${logs_location}" "${log_folder}" "${COMPSs_exec}" "${comm}" "${runcompss_opts}" "${num_test}" "${template_id}" "${vm_type}" "${cloud_owner}" "${skip}" "${retry}"
    if [ $? -ne 0 ]; then
       exitValue=1
    fi

    # Exit
    exit $exitValue
  }

  execute_tests_devel() {
    echo "Executing tests in DEVEL mode"
    logArguments

    #Set Default environment variables
    user=$(whoami)
    target_base_dir="/home/$user/tests_devel"
    COMPSS_HOME="/opt/COMPSs/"
    java_apps="true"
    comm=es.bsc.compss.nio.master.NIOAdaptor
    runcompss_opts="-d"
    # Set environment variables from configuration file
    source_configuration

    # Set the rest of environment variables
    source_base_dir="${SCRIPT_DIR}/../sources/$environment"
    logs_location="$HOME"
    COMPSs_log_folder="$HOME/.COMPSs"
    COMPSs_exec="$COMPSS_HOME/Runtime/scripts/user/runcompss"

    # Export base variables
    export COMPSS_HOME=$COMPSS_HOME
    export JAVA_HOME=$JAVA_HOME

    # Compile tests
    if [ "$java_apps" == "true" ]; then
      "${SCRIPT_DIR}"/compile_sources_devel "${source_base_dir}"
      if [ $? -ne 0 ]; then
        exit 1
      fi
    fi

    # Deploy tests
    "${SCRIPT_DIR}"/deploy_sources_devel "${source_base_dir}" "${target_base_dir}"
    if [ $? -ne 0 ]; then
      exit 1
    fi

    # Erase COMPSs log folder
    echo "---- Erase current COMPSs log folder"
    rm -rf "${COMPSs_log_folder}"

    # Execute tests
    "${SCRIPT_DIR}"/execute_devel "${COMPSs_exec}" "${comm}" "${runcompss_opts}" "${target_base_dir}" "${COMPSs_log_folder}" "${skip}" "${retry}"
    if [ $? -ne 0 ]; then
      exit 1
    else
      exit 0
    fi
  }

  logArguments() {
    echo "  - Skip :       ${skip}"
    echo "  - Retries:     ${retry}"
    echo "  - Only Lang:   ${onlyLang}"
    echo "  - Environment: ${environment}"
    echo "  - CFG File:    ${configuration}"
  }

  source_configuration() {
    if [[ $configuration = */* ]]; then
      # shellcheck source=../configurations/local.cfg
      source "$configuration"
      if [ $? -ne 0 ]; then
        exit 1
      fi
    else
      # shellcheck source=../configurations/local.cfg
      source "${SCRIPT_DIR}/../configurations/$configuration"
      if [ $? -ne 0 ]; then
        exit 1
      fi
    fi

    if [ -z "$JAVA_HOME" ]; then
      echo "${ERROR_LOAD_CONFIG}"
      exit 1
    fi
  }


  #-----------------------------------------------------------------------------------------------
  # MAIN
  #-----------------------------------------------------------------------------------------------

  # Get and check arguments
  get_args "$@"
  check_args

  # Execute tests
  execute_tests
